name: CI

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 3.11 이상 설정
        python-version: [ "3.11" ]
    steps:
      #----------------------------------------------
      #           checkout, python 환경 구성
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #               Poetry 설치 및 구성
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #              캐시 virtual env 로드
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.3.2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      #               의존성 설치 (poetry)
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      #----------------------------------------------
      #          가상 환경 activate, 테스트 수행
      #----------------------------------------------
      - name: Test with pytest
        # 현재 `pytest`로 `--cov` 영역을 제한할 수 없으므로 전체 커버리지를 테스트 해야한다.
        run: |
          source .venv/bin/activate
          poetry run pytest tests/
